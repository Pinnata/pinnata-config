/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ProxyOracle {
  export type TokenFactorsStruct = {
    borrowFactor: BigNumberish;
    collateralFactor: BigNumberish;
    liqIncentive: BigNumberish;
  };

  export type TokenFactorsStructOutput = [number, number, number] & {
    borrowFactor: number;
    collateralFactor: number;
    liqIncentive: number;
  };
}

export interface ProxyOracleInterface extends utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "asCELOBorrow(address,uint256,address)": FunctionFragment;
    "asCELOCollateral(address,uint256,uint256,address)": FunctionFragment;
    "convertForLiquidation(address,address,uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setTokenFactors(address[],(uint16,uint16,uint16)[])": FunctionFragment;
    "setWhitelistERC1155(address[],bool)": FunctionFragment;
    "source()": FunctionFragment;
    "support(address)": FunctionFragment;
    "supportWrappedToken(address,uint256)": FunctionFragment;
    "tokenFactors(address)": FunctionFragment;
    "unsetTokenFactors(address[])": FunctionFragment;
    "whitelistERC1155(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernor"
      | "asCELOBorrow"
      | "asCELOCollateral"
      | "convertForLiquidation"
      | "governor"
      | "pendingGovernor"
      | "setPendingGovernor"
      | "setTokenFactors"
      | "setWhitelistERC1155"
      | "source"
      | "support"
      | "supportWrappedToken"
      | "tokenFactors"
      | "unsetTokenFactors"
      | "whitelistERC1155"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "asCELOBorrow",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "asCELOCollateral",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertForLiquidation",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFactors",
    values: [string[], ProxyOracle.TokenFactorsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistERC1155",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "source", values?: undefined): string;
  encodeFunctionData(functionFragment: "support", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportWrappedToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetTokenFactors",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistERC1155",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asCELOBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asCELOCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "source", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetTokenFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistERC1155",
    data: BytesLike
  ): Result;

  events: {
    "AcceptGovernor(address)": EventFragment;
    "SetGovernor(address)": EventFragment;
    "SetPendingGovernor(address)": EventFragment;
    "SetTokenFactor(address,tuple)": EventFragment;
    "SetWhitelist(address,bool)": EventFragment;
    "UnsetTokenFactor(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnsetTokenFactor"): EventFragment;
}

export interface AcceptGovernorEventObject {
  governor: string;
}
export type AcceptGovernorEvent = TypedEvent<
  [string],
  AcceptGovernorEventObject
>;

export type AcceptGovernorEventFilter = TypedEventFilter<AcceptGovernorEvent>;

export interface SetGovernorEventObject {
  governor: string;
}
export type SetGovernorEvent = TypedEvent<[string], SetGovernorEventObject>;

export type SetGovernorEventFilter = TypedEventFilter<SetGovernorEvent>;

export interface SetPendingGovernorEventObject {
  pendingGovernor: string;
}
export type SetPendingGovernorEvent = TypedEvent<
  [string],
  SetPendingGovernorEventObject
>;

export type SetPendingGovernorEventFilter =
  TypedEventFilter<SetPendingGovernorEvent>;

export interface SetTokenFactorEventObject {
  token: string;
  tokenFactor: ProxyOracle.TokenFactorsStructOutput;
}
export type SetTokenFactorEvent = TypedEvent<
  [string, ProxyOracle.TokenFactorsStructOutput],
  SetTokenFactorEventObject
>;

export type SetTokenFactorEventFilter = TypedEventFilter<SetTokenFactorEvent>;

export interface SetWhitelistEventObject {
  token: string;
  ok: boolean;
}
export type SetWhitelistEvent = TypedEvent<
  [string, boolean],
  SetWhitelistEventObject
>;

export type SetWhitelistEventFilter = TypedEventFilter<SetWhitelistEvent>;

export interface UnsetTokenFactorEventObject {
  token: string;
}
export type UnsetTokenFactorEvent = TypedEvent<
  [string],
  UnsetTokenFactorEventObject
>;

export type UnsetTokenFactorEventFilter =
  TypedEventFilter<UnsetTokenFactorEvent>;

export interface ProxyOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asCELOBorrow(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    asCELOCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenFactors(
      tokens: string[],
      _tokenFactors: ProxyOracle.TokenFactorsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    source(overrides?: CallOverrides): Promise<[string]>;

    support(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    supportWrappedToken(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenFactors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        borrowFactor: number;
        collateralFactor: number;
        liqIncentive: number;
      }
    >;

    unsetTokenFactors(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistERC1155(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  acceptGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asCELOBorrow(
    token: string,
    amount: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  asCELOCollateral(
    token: string,
    id: BigNumberish,
    amount: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertForLiquidation(
    tokenIn: string,
    tokenOut: string,
    tokenOutId: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenFactors(
    tokens: string[],
    _tokenFactors: ProxyOracle.TokenFactorsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistERC1155(
    tokens: string[],
    ok: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  source(overrides?: CallOverrides): Promise<string>;

  support(token: string, overrides?: CallOverrides): Promise<boolean>;

  supportWrappedToken(
    token: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenFactors(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      borrowFactor: number;
      collateralFactor: number;
      liqIncentive: number;
    }
  >;

  unsetTokenFactors(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistERC1155(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    asCELOBorrow(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asCELOCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenFactors(
      tokens: string[],
      _tokenFactors: ProxyOracle.TokenFactorsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    source(overrides?: CallOverrides): Promise<string>;

    support(token: string, overrides?: CallOverrides): Promise<boolean>;

    supportWrappedToken(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenFactors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        borrowFactor: number;
        collateralFactor: number;
        liqIncentive: number;
      }
    >;

    unsetTokenFactors(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistERC1155(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AcceptGovernor(address)"(governor?: null): AcceptGovernorEventFilter;
    AcceptGovernor(governor?: null): AcceptGovernorEventFilter;

    "SetGovernor(address)"(governor?: null): SetGovernorEventFilter;
    SetGovernor(governor?: null): SetGovernorEventFilter;

    "SetPendingGovernor(address)"(
      pendingGovernor?: null
    ): SetPendingGovernorEventFilter;
    SetPendingGovernor(pendingGovernor?: null): SetPendingGovernorEventFilter;

    "SetTokenFactor(address,tuple)"(
      token?: string | null,
      tokenFactor?: null
    ): SetTokenFactorEventFilter;
    SetTokenFactor(
      token?: string | null,
      tokenFactor?: null
    ): SetTokenFactorEventFilter;

    "SetWhitelist(address,bool)"(
      token?: string | null,
      ok?: null
    ): SetWhitelistEventFilter;
    SetWhitelist(token?: string | null, ok?: null): SetWhitelistEventFilter;

    "UnsetTokenFactor(address)"(
      token?: string | null
    ): UnsetTokenFactorEventFilter;
    UnsetTokenFactor(token?: string | null): UnsetTokenFactorEventFilter;
  };

  estimateGas: {
    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asCELOBorrow(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asCELOCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenFactors(
      tokens: string[],
      _tokenFactors: ProxyOracle.TokenFactorsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    source(overrides?: CallOverrides): Promise<BigNumber>;

    support(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportWrappedToken(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFactors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unsetTokenFactors(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistERC1155(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asCELOBorrow(
      token: string,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    asCELOCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenFactors(
      tokens: string[],
      _tokenFactors: ProxyOracle.TokenFactorsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    source(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    support(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportWrappedToken(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFactors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsetTokenFactors(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistERC1155(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
